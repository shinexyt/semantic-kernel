#
# This workflow will build and run all unit tests.
#

name: dotnet-pr

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main", "feature*" ]
    
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  check-for-dotnet-changes:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.filter.outputs.dotnet}}
    steps:
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          dotnet:
            - 'dotnet/**'
            - 'samples/dotnet/**'
    - uses: actions/checkout@v3
    # run only if 'dotnet' files were changed
    - name: dotnet changes found
      if: steps.filter.outputs.dotnet == 'true'
      run: echo "dotnet file"
    # run only if not 'dotnet' files were changed
    - name: no dotnet changes found
      if: steps.filter.outputs.dotnet != 'true'
      run: echo "NOT dotnet file"

  build:
    strategy:
        matrix:
          os: [ubuntu-latest]
          configuration: [Release, Debug]
    runs-on: ${{ matrix.os }}
    needs: check-for-dotnet-changes
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
    - uses: actions/checkout@v3
      with:
        clean: true

    - name: Setup .NET
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GPR_READ_TOKEN }}

    - uses: actions/cache@v3
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Find solutions
      shell: bash
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      run: echo "solutions=$(find ./ -type f -name "*.sln" | tr '\n' ' ')" >> $GITHUB_ENV

    - name: Restore dependencies
      shell: bash
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      run: |
        for solution in ${{ env.solutions }}; do
          dotnet restore $solution
        done

    - name: Build
      shell: bash
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      run: |
        for solution in ${{ env.solutions }}; do
          dotnet build $solution --no-restore --configuration ${{ matrix.configuration }}
        done

    - name: Find unit test projects
      shell: bash
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      run: echo "projects=$(find ./dotnet -type f -name "*.UnitTests.csproj" | tr '\n' ' ')" >> $GITHUB_ENV

    - name: Test
      shell: bash
      if: needs.check-for-dotnet-changes.outputs.output1 == 'true'
      run: |
        for project in ${{ env.projects }}; do
            dotnet test $project --no-build --verbosity normal --logger trx --results-directory ./TestResults --configuration ${{ matrix.configuration }}
        done
